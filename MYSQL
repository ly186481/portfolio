-- practice
SELECT 
	name,
    unit_price,
    (unit_price*1.1) AS 'new price'
FROM products;

-- WHERE
SELECT *
FROM Customers
WHERE points > 3000;

SELECT *
FROM Customers
WHERE state = 'VA';

-- customer home state without VA
SELECT *
FROM Customers
WHERE state <> 'VA';

-- customer born after 1990
SELECT *
FROM Customers
WHERE birth_date > '1990-01-01';

-- Exercise, Get the orders placed this year
SELECT *
FROM orders
WHERE order_date >= '2019-01-01';

-- The AND,OR, and NOT operators
SELECT *
FROM Customers
WHERE birth_date > '1990-01-01' AND points > 1000;

SELECT *
FROM Customers
WHERE birth_date > '1990-01-01' OR points > 1000;

SELECT *
FROM Customers
WHERE birth_date > '1990-01-01' OR points > 1000 AND 
state='VA';

-- AND always evaluate first than OR
SELECT *
FROM Customers
WHERE birth_date > '1990-01-01' OR 
	(points > 1000 AND state='VA');

SELECT *
FROM Customers
WHERE NOT (birth_date > '1990-01-01' OR points > 1000);

SELECT *
FROM Customers
WHERE birth_date <= '1990-01-01' AND points <= 1000;

-- Exercise 
-- From the order_items table, get the items for order #6
-- where the total price is greater than 30

SELECT *
FROM order_items
WHERE order_id='6' AND unit_price*quantity >30;

-- The IN operator
SELECT *
FROM customers
WHERE state='VA' OR state='GA' OR state='FL';

-- simplify
SELECT *
FROM customers
WHERE state IN ('VA','FL','GA');

SELECT *
FROM customers
WHERE state NOT IN ('VA','FL','GA');

-- Exercise
-- Return products with quantity in stock equal to 49,38,72

SELECT *
FROM products
WHERE quantity_in_stock IN ('49','38','72');

-- The between operator
SELECT *
FROM customers 
WHERE points >= 1000 AND points <= 3000;

-- Simplify
SELECT *
FROM customers 
WHERE points BETWEEN 1000 AND 3000;

-- Exercise 
-- Return customers born btw 1/1/1990 and 1/1/2000
SELECT *
FROM customers 
WHERE birth_date BETWEEN '1990-01-01' AND '2000-01-01';

-- The LIKE operator
SELECT *
FROM customers
WHERE last_name LIKE '%b%';

SELECT *
FROM customers
WHERE last_name LIKE '%y';

SELECT *
FROM customers
WHERE last_name LIKE 'b____y';
-- % any number of charatcters
-- _ single character

-- EXERCISE
-- addresses contain TRAIL or AVENUE
-- phone numbers end with 9
SELECT *
FROM customers
WHERE address LIKE '%TRAIL%' OR 
	address LIKE '%AVENUE%';

SELECT *
FROM customers
WHERE phone LIKE '%9';

SELECT *
FROM customers
WHERE phone NOT LIKE '%9';

-- REGEXP
SELECT *
FROM customers
WHERE last_name LIKE '%field%';

-- or rewrite
SELECT *
FROM customers
WHERE last_name REGEXP 'field';

SELECT *
FROM customers
WHERE last_name REGEXP 'field|mac';

SELECT *
FROM customers
WHERE last_name REGEXP 'field|mac|rose';

SELECT *
FROM customers
WHERE last_name REGEXP '[gim]e';

SELECT *
FROM customers
WHERE last_name REGEXP '[a-h]e';

-- ^begining
-- $end
-- |logical or
-- [abcd]
-- [a-f]

-- EXERCISE
-- fist names are ELKA or AMBUR
-- last names end with EY or ON
-- last names start with MY or contains SE
-- last names contain B followed by R or U
SELECT *
FROM customers
WHERE first_name REGEXP 'ELKA|AMBUR';
    
SELECT *
FROM customers
WHERE last_name REGEXP 'EY$|ON$';
    
SELECT *
FROM customers
WHERE last_name REGEXP '^MY|SE';
    
SELECT *
FROM customers
WHERE last_name REGEXP 'b[ru]' ;

-- or
SELECT *
FROM customers
WHERE last_name REGEXP 'br|bu';

-- NULL operator
SELECT *
FROM customers
WHERE phone IS NULL;
 
SELECT *
FROM customers
WHERE phone IS NOT NULL;

-- EXERCISE
-- Get the orders that are not shipped
SELECT *
FROM orders
WHERE shipped_id is NULL;

-- ORDER BY Operator
SELECT *
FROM customers
ORDER BY first_name;

SELECT *
FROM customers
ORDER BY first_name DESC;

SELECT *
FROM customers
ORDER BY state, first_name;

SELECT *
FROM customers
ORDER BY state DESC, first_name DESC;

SELECT first_name, last_name
FROM customers
ORDER BY birth_date;

SELECT first_name, last_name, 10 AS points
FROM customers
ORDER BY points, first_name;

-- EXERCISE
SELECT *, quantity*unit_price AS total_price
FROM order_items
WHERE order_id='2'
ORDER BY total_price DESC;

-- The limit CLAUSE
SELECT *
FROM customers
LIMIT 6, 3;
-- page 1: 1-3
-- page 2: 4-6
-- page 3: 7-9

-- EXERCISE
-- GET the top three loyal customers
SELECT *
FROM customers
ORDER BY points DESC
LIMIT 3;

-- INNER JOIN
SELECT *
FROM orders
JOIN customers 
	ON orders.customer_id = customers.customer_id;
    
SELECT order_id, first_name, last_name
FROM orders
JOIN customers
	ON orders.customer_id = customers.customer_id;
 
SELECT order_id, orders.customer_id, first_name, last_name
FROM orders
JOIN customers
	ON orders.customer_id = customers.customer_id;
 
-- Simplify
SELECT order_id, o.customer_id, first_name, last_name
FROM orders o
JOIN customers c
	ON o.customer_id = c.customer_id;
    
-- EXCERCISE
SELECT order_id, o.product_id, quantity, o.unit_price
FROM order_items o
JOIN products p
	ON o.product_id=p.product_id;

-- Joining Across Databases
SELECT *
FROM order_items o
JOIN sql_inventory.products p
	ON o.product_id = p.product_id;

-- self join
SELECT *
FROM sql_hr.employees;

USE sql_hr;
SELECT *
FROM employees e
JOIN employees m
	ON e.reports_to = m.employee_id





